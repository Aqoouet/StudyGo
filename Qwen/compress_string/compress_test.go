package main

import (
    "testing"
    "strings"
)

// -----------------------------
// –¢–µ—Å—Ç—ã –¥–ª—è Compress
// -----------------------------

func TestCompress(t *testing.T) {
    tests := []struct {
        input    string
        expected string
    }{
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        {"aabbaaa", "a2b2a3"},      // "aabbaaa" ‚Üí 7 —Å–∏–º–≤–æ–ª–æ–≤; "a2b2a3" ‚Üí 6 ‚Üí —Å–∂–∞—Ç–æ
        {"aaaabbb", "a4b3"},        // "aaaabbb" ‚Üí 7; "a4b3" ‚Üí 5 ‚Üí —Å–∂–∞—Ç–æ
        {"abcd", "abcd"},           // –¥–ª–∏–Ω–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Üí –Ω–µ —Å–∂–∏–º–∞–µ–º
        {"aaaaaa", "a6"},           // "aaaaaa" ‚Üí 6; "a6" ‚Üí 2 ‚Üí —Å–∂–∞—Ç–æ
        {"abba", "abba"},           // "abba" ‚Üí 4; "a2b2" ‚Üí 5 ‚Üí –ù–ï —Å–∂–∞—Ç–æ ‚Üí –≤–µ—Ä–Ω—É–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª
        {"aaAAbbBB", "aaAAbbBB"},   // "aaAAbbBB" ‚Üí 8; "a2A2b2B2" ‚Üí 9 ‚Üí –ù–ï —Å–∂–∞—Ç–æ
        {"", ""},                   // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        {"a", "a"},                 // –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª ‚Üí –Ω–µ —Å–∂–∏–º–∞–µ–º
        {"aaaaaaaaaa", "a10"},      // "aaaaaaaaaa" ‚Üí 10; "a10" ‚Üí 3 ‚Üí —Å–∂–∞—Ç–æ
        {"zzzzzzzzzzeeeeeeerrrrrrrrtttttttttt", "z10e7r8t10"}, // –¥–ª–∏–Ω–Ω–∞—è —Å–µ—Ä–∏—è ‚Äî —Å–∂–∞—Ç–∞
        {"abcdefgh", "abcdefgh"},   // –Ω–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π ‚Üí –Ω–µ —Å–∂–∞—Ç–æ
        {"abcabc", "abcabc"},       // —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π ‚Üí –Ω–µ —Å–∂–∞—Ç–æ
    }

    for _, test := range tests {
        t.Run(test.input, func(t *testing.T) {
            result := Compress(test.input)
            if result != test.expected {
                t.Errorf("Compress(%q) = %q; want %q", test.input, result, test.expected)
            }
        })
    }
}

// -----------------------------
// –¢–µ—Å—Ç—ã –¥–ª—è Decompress
// -----------------------------

func TestDecompress(t *testing.T) {
    tests := []struct {
        input    string
        expected string
    }{
        // –ë–∞–∑–æ–≤—ã–µ —Å–ª—É—á–∞–∏
        {"a2b2a3", "aabbaaa"},
        {"a4b3", "aaaabbb"},
        {"abcd", "abcd"},
        {"a", "a"},
        {"a1z2", "azz"},
        {"a10", "aaaaaaaaaa"},
        {"XYZ", "XYZ"},
        {"X2Y3Z", "XXYYYZ"},
        {"", ""},

        // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏ ‚Äî –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
        {"2a", "2a"},              // –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —á–∏—Å–ª–∞ ‚Üí –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
        {"a1bX3c", "abXXXc"},      // X –Ω–µ —á–∏—Å–ª–æ ‚Üí –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
        {"a-3", "a---"},           // –º–∏–Ω—É—Å –ø–µ—Ä–µ–¥ —á–∏—Å–ª–æ–º ‚Üí –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
        {"a1b2cdef3", "abbcdefff"},// 'd' –ø–æ—Å–ª–µ —á–∏—Å–ª–∞ ‚Üí –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        {"a1b2c3def4", "abbcccdeffff"}, // —á–∞—Å—Ç–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        {"aX", "aX"},              // –Ω–µ—Ç —á–∏—Å–ª–∞ –ø–æ—Å–ª–µ X ‚Üí –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
        {"a1bX", "abX"},           // —á–∞—Å—Ç–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞

        // –ù–æ–≤—ã–µ —Ç–µ—Å—Ç—ã: –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
        {"12a3", "12aaa"},         // —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å ‚Äî —á–∏—Å–ª–æ, –Ω–æ –Ω–µ –ø–∞—Ä–∞ ‚Üí –æ—Å—Ç–∞–≤–∏—Ç—å 12 + –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å a3
        {"a0b1c2", "bcc"},         // –Ω—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Üí –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å "a"
        {"a1", "a"},               // –æ–¥–Ω–æ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ —Å–∏–º–≤–æ–ª–∞ ‚Üí –ø—Ä–æ—Å—Ç–æ —Å–∏–º–≤–æ–ª
        {"üòÄ2üòÑ3", "üòÄüòÄüòÑüòÑüòÑ"},     // —é–Ω–∏–∫–æ–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã ‚Üí –≤–∞–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å
        {"a1bX3", "abXXX"},        // –æ—à–∏–±–∫–∞ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ ‚Üí –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —á–∞—Å—Ç–∏
        {"a1b2c", "abbc"},         // c ‚Äî –Ω–µ —á–∏—Å–ª–æ ‚Üí –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ –Ω–µ–≥–æ
        {"a99", strings.Repeat("a", 99)}, // –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ ‚Üí –¥–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        {"a1b0c5", "accccc"},      // b0 ‚Üí —É–±–∏—Ä–∞–µ–º
        {"5", "5"},                // –æ–¥–∏–Ω–æ—á–Ω–∞—è —Ü–∏—Ñ—Ä–∞ ‚Üí –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å

        // –¢–µ—Å—Ç—ã, –≥–¥–µ —Ç–≤–æ–π –∫–æ–¥ –º–æ–∂–µ—Ç –¥–∞—Ç—å –æ—à–∏–±–∫—É:
        {"a1b1", "ab"},            // –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä—ã (a1 + b1)
        {"a2b", "aab"},            // —á–∏—Å–ª–æ, –ø–æ—Ç–æ–º –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª
        {"a1b2c1", "abbc"},       // —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –∏ —Å–∏–º–≤–æ–ª–æ–≤
        {"a1bXc3", "abXccc"},      // –±—É–∫–≤–∞ –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏
        {"abc1", "abc"},          // —á–∏—Å–ª–æ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ –ø–µ—Ä–µ–¥
        {"aX1b2", "aXbb"},       // —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        {"a1bXc", "abXc"},         // –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —á–∏—Å–ª–∞
    }

    for _, tt := range tests {
        t.Run(tt.input, func(t *testing.T) {
            result := Decompress(tt.input)
            if result != tt.expected {
                t.Errorf("Decompress(%q) = %q; want %q", tt.input, result, tt.expected)
            }
        })
    }
}

// -----------------------------
// –¢–µ—Å—Ç—ã –¥–ª—è IsValidCompressedFormat
// -----------------------------

func TestIsValidCompressedFormat(t *testing.T) {
    tests := []struct {
        input    string
        expected bool
    }{
        {"a2b2a3", true},
        {"a4b3", true},
        {"abcd", false},     // —Å–∏–º–≤–æ–ª—ã –±–µ–∑ —á–∏—Å–µ–ª —Å—á–∏—Ç–∞—é—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏
        {"a", false},        // –æ–¥–∏–Ω–æ—á–Ω—ã–π —Å–∏–º–≤–æ–ª
        {"a1z2", true},
        {"a10", true},
        {"2a", false},      // –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —á–∏—Å–ª–∞ ‚Üí –Ω–µ–≤–µ—Ä–Ω–æ
        {"a1bX3c", true},  // X –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —á–∏—Å–ª–∞ ‚Üí –Ω–µ–≤–µ—Ä–Ω–æ
        {"a-3", true},     // - –Ω–µ —á–∞—Å—Ç—å —á–∏—Å–ª–∞ ‚Üí –Ω–µ–≤–µ—Ä–Ω–æ
        {"a1b2cdef3", true}, // 'd' –ø–æ—Å–ª–µ —á–∏—Å–ª–∞ –Ω–µ –∏–º–µ–µ—Ç —á–∏—Å–ª–∞ ‚Üí –Ω–µ–≤–µ—Ä–Ω–æ
        {"", false},         // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º–æ–π
    }

    for _, test := range tests {
        t.Run(test.input, func(t *testing.T) {
            result := IsValidCompressedFormat(test.input)
            if result != test.expected {
                t.Errorf("IsValidCompressedFormat(%q) = %v; want %v", test.input, result, test.expected)
            }
        })
    }
}


